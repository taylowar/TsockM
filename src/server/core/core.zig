const std = @import("std");
pub const Peer = @import("peer.zig").Peer;
pub const sc = @import("server.zig");
pub const PeerPool = @import("peer-pool.zig").PeerPool;
pub const SharedData = @import("shared-data.zig").SharedData;

///Generates a sequence of bytes {characters} using a secure PRNG and an alphabet
///The generated bytes are allocated
pub fn randomByteSequence(allocator: std.mem.Allocator, comptime seq_len: usize) []const u8 {
    const alphabet = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890-=;[]<,.";
    var id = [_]u8{0} ** seq_len; // initialize byte array on the stack
    for (0..seq_len) |i| {
        const ai = std.crypto.random.intRangeLessThan(usize, 0, alphabet.len);
        id[i] = alphabet[ai];
    }
    // dont forget to allocate the string :D
    const id_allocd = std.fmt.allocPrint(allocator, "{s}", .{id}) catch |err| {
        std.log.err("{any}", .{err});
        std.posix.exit(1);
    };
    return id_allocd;
}

test {
    _ = @import("server.test.zig");
    //_ = @import("peer-pool.zig");
    @import("std").testing.refAllDecls(@This());
}
